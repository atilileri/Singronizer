"""Module providing utilities for Spotify platform."""

from typing import List, Tuple # for type hinting

import spotipy
from spotipy.oauth2 import SpotifyOAuth


class SpotifyHandler:
    """Handles retrieval of data from the Spotify
    through the Spotipy module, on top of WEB API
    """
    # todo make parent platform_handler if needed

    def __init__(self) -> None:
        self._scope = 'playlist-read-private'
        # constructor reads client_id, client_secret, redirect_uri
        # from environment variables. check <project_root>/.envs
        self._sp = spotipy.Spotify(auth_manager=SpotifyOAuth(scope=self._scope,
                                                             open_browser=False))
        self._user_id = self._sp.me()['id']

    def get_user_playlist_ids(self) -> Tuple[List[str], List[str]]:
        """Get ids of playlists, generated by the user

        Returns:
            Tuple[List[str], List[str]]: playlists with selected properties
        """
        offset = 0
        pl_ids = []
        pl_names = []
        while True:  # there is a limit per req. so we loop
            response = self._sp.current_user_playlists(
                offset=offset) # todo - add fields filter param

            if len(response['items']) == 0:
                break  # when none or done

            for playlist in response['items']: # todo - more pythonic
                if playlist['owner']['id'] == self._user_id:
                    pl_ids.append(playlist['id'])
                    pl_names.append(playlist['name'])

            offset = offset + len(response['items'])

        return pl_ids, pl_names

    def get_tracks(self, playlist_id: List[str]) -> List[dict]:
        """Get track list of a playlist

        Args:
            playlist_id (List[str]): playlist to get tracks off

        Returns:
            List[dict]: list of track objects
        """
        offset = 0
        tracks = []
        while True:  # there is a limit per req. so we loop
            response = self._sp.playlist_items(playlist_id=playlist_id,
                                               offset=offset,
                                               additional_types=['track'])

            if len(response['items']) == 0:
                break

            # we don't need spotify related stats for each track,
            # so strip them
            tracks.extend(item['track'] for item in response['items'])

            offset = offset + len(response['items'])

        return tracks
